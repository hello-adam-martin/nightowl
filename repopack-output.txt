================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2024-09-18T09:04:02.435Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.


For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: README.md
================
# NightOwl

NightOwl is a Next.js-based web application for a late-night delivery service. It allows users to browse products, add items to their cart, and place orders for delivery within a specified service area.

## Features

- Product browsing with category filtering
- Cart management
- Address verification and serviceability check
- Secure payment processing with Stripe
- Responsive design for mobile and desktop

## Technologies Used

- [Next.js](https://nextjs.org/) - React framework for server-side rendering and static site generation
- [TypeScript](https://www.typescriptlang.org/) - Typed superset of JavaScript
- [Tailwind CSS](https://tailwindcss.com/) - Utility-first CSS framework
- [Stripe](https://stripe.com/) - Payment processing
- Custom UI components (based on shadcn/ui)

## Getting Started

1. Clone the repository:
   ```
   git clone https://github.com/your-username/nightowl.git
   cd nightowl
   ```

2. Install dependencies:
   ```
   npm install
   ```

3. Set up environment variables:
   Create a `.env.local` file in the root directory and add the following variables:
   ```
   NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key
   STRIPE_SECRET_KEY=your_stripe_secret_key
   ```

4. Run the development server:
   ```
   npm run dev
   ```

5. Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Project Structure

- `app/`: Next.js app directory containing pages and layouts
- `components/`: Reusable React components
- `context/`: React context providers for state management
- `lib/`: Utility functions and helpers
- `public/`: Static assets
- `types/`: TypeScript type definitions

## Deployment

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out the [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the [MIT License](LICENSE).

================
File: app/about/page.tsx
================
'use client';

import { Button } from "@/components/ui/button"
import Link from 'next/link'
import Image from 'next/image'
import { storeConfig } from '../../config/config'

const formatHour = (hour: number) => {
  const period = hour >= 12 ? 'PM' : 'AM';
  const displayHour = hour % 12 || 12;
  return `${displayHour}:00 ${period}`;
};

export default function AboutPage() {
  return (
    <div className="min-h-screen bg-gray-100">
      {/* Fixed top bar */}
      <div className="fixed top-0 left-0 right-0 bg-white shadow-md z-50">
        <div className="max-w-7xl mx-auto px-4 py-2">
          <div className="flex justify-between items-center">
            <div className="flex items-center">
              <Image src="/NightOwl.png" alt="NightOwl Logo" width={30} height={30} />
              <h1 className="text-xl font-bold ml-2">NightOwl</h1>
            </div>
            <p className="text-sm text-gray-600">
              Open {formatHour(storeConfig.openingHour)} - {formatHour(storeConfig.closingHour)}
            </p>
            <Link href="/">
              <Button variant="outline" size="sm">
                Back to Home
              </Button>
            </Link>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="pt-20 p-8">
        <div className="max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-8">
          {/* Add logo here */}
          <div className="flex justify-center mb-6">
            <Image src="/NightOwl.png" alt="NightOwl Logo" width={120} height={120} />
          </div>
          
          <h2 className="text-2xl font-bold text-center mb-6">About NightOwl</h2>
          
          <section className="mb-8">
            <h3 className="text-xl font-semibold mb-4">Our Story</h3>
            <p className="text-gray-700">
            NightOwl was founded with a simple mission: to provide convenient service to our community. We understand that life doesnâ€™t stop at certain hours, and neither should your access to essential items.
            </p>
          </section>

          <section className="mb-8">
            <h3 className="text-xl font-semibold mb-4">What We Offer</h3>
            <p className="text-gray-700">
              We specialize in delivering a wide range of products, from snacks and beverages to household essentials, right to your doorstep during the late hours when most stores are closed.
            </p>
          </section>

          <section className="mb-8">
            <h3 className="text-xl font-semibold mb-4">Our Commitment</h3>
            <p className="text-gray-700">
              At NightOwl, we&apos;re committed to providing fast, reliable service with a focus on customer satisfaction. Our team works tirelessly to ensure that your late-night needs are met with efficiency and care.
            </p>
          </section>

          <section className="mb-8">
            <h3 className="text-xl font-semibold mb-4">Our Service Area</h3>
            <p className="text-gray-700">
              We currently serve [list of neighborhoods or cities]. Check our delivery page to see if we deliver to your area!
            </p>
          </section>

          <section className="mb-8">
            <h3 className="text-xl font-semibold mb-4">Contact Us</h3>
            <p className="text-gray-700">
              Have questions or feedback? We&apos;d love to hear from you!<br />
              Email: support@nightowl.com<br />
              Phone: (555) 123-4567
            </p>
          </section>

          <section>
            <h3 className="text-xl font-semibold mb-4">Frequently Asked Questions</h3>
            <div className="space-y-4">
              <div>
                <h4 className="font-medium">Q: What are your operating hours?</h4>
                <p className="text-gray-700">A: We operate from {formatHour(storeConfig.openingHour)} to {formatHour(storeConfig.closingHour)} daily.</p>
              </div>
              <div>
                <h4 className="font-medium">Q: How fast is your delivery?</h4>
                <p className="text-gray-700">A: We aim to deliver within 30-45 minutes of order placement, depending on your location.</p>
              </div>
              <div>
                <h4 className="font-medium">Q: Do you have a minimum order amount?</h4>
                <p className="text-gray-700">A: Yes, our minimum order amount is ${storeConfig.serviceInfo.minOrderValue.toFixed(2)}.</p>
              </div>
              <div>
                <h4 className="font-medium">Q: What payment methods do you accept?</h4>
                <p className="text-gray-700">A: We accept all major credit cards, debit cards, and mobile payment options.</p>
              </div>
            </div>
          </section>
        </div>
      </div>
    </div>
  )
}

================
File: app/api/create-payment-intent/route.ts
================
import { NextResponse } from 'next/server';
import Stripe from 'stripe';

if (!process.env.STRIPE_SECRET_KEY) {
  throw new Error('STRIPE_SECRET_KEY is not set in the environment variables');
}

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
  apiVersion: '2024-06-20',
});

export async function POST(req: Request) {
  try {
    const { amount } = await req.json();

    if (!amount || typeof amount !== 'number') {
      return NextResponse.json({ error: 'Invalid amount' }, { status: 400 });
    }

    const paymentIntent = await stripe.paymentIntents.create({
      amount,
      currency: 'usd',
    });

    return NextResponse.json({ clientSecret: paymentIntent.client_secret });
  } catch (error) {
    console.error('Error creating payment intent:', error);
    if (error instanceof Stripe.errors.StripeError) {
      return NextResponse.json({ error: error.message }, { status: error.statusCode });
    }
    return NextResponse.json({ error: 'An unexpected error occurred' }, { status: 500 });
  }
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { CartProvider } from '../context/CartContext';
import { AddressProvider } from '../context/AddressContext';

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "NightOwl - Late Night Delivery Service",
  description: "Your go-to late-night delivery service for groceries, household essentials, and more.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AddressProvider>
          <CartProvider>
            {children}
          </CartProvider>
        </AddressProvider>
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import { HomePage } from "@/components/home-page"

export default function Page() {
  return <HomePage />
}

================
File: components/AddressForm.tsx
================
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Check, X } from 'lucide-react'
import { useAddress } from '../context/AddressContext';

type ServiceInfo = {
  deliveryTime: string;
  serviceArea: string;
  minOrderValue: number;
}

type AddressFormProps = {
  addressEntered: boolean
  setAddressEntered: (addressEntered: boolean) => void
  checkServiceability: () => Promise<void>;
  setAddressChanged: React.Dispatch<React.SetStateAction<boolean>>;
  setPhoneNumberEntered: (phoneNumberEntered: boolean) => void;
  serviceInfo: ServiceInfo;
}

const AddressForm: React.FC<AddressFormProps> = ({
  addressEntered,
  setAddressEntered,
  checkServiceability,
  setAddressChanged,
  setPhoneNumberEntered,
  serviceInfo,
}) => {
  const { 
    address, 
    setAddress, 
    phoneNumber, 
    setPhoneNumber, 
    isServiceable, 
    setIsServiceable,
    isVerified,
    setIsVerified
  } = useAddress();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (address.trim() !== '' && phoneNumber.trim() !== '') {
      setAddressEntered(true);
      setIsServiceable(null);
      await checkServiceability();
      setIsVerified(true);
    }
  }

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAddress(e.target.value);
    setIsServiceable(null);
    setAddressChanged(true);
    setIsVerified(false);
  }

  const handlePhoneNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPhoneNumber(e.target.value)
    setPhoneNumberEntered(e.target.value.trim() !== '')
  }

  return (
    <Card className={`border-2 ${isVerified ? 'border-gray-300' : 'border-blue-500'} shadow-lg p-4 sm:p-6`}>
      <CardHeader>
        <CardTitle className={`text-xl sm:text-2xl font-bold ${isVerified ? 'text-gray-600' : 'text-blue-600'}`}>Get Started</CardTitle>
        <CardDescription className="text-sm sm:text-base text-gray-700">NightOwl is a delivery-only service. Please enter your address and phone number to get started.</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit}>
          <div className="grid w-full items-center gap-4">
            <div className="flex flex-col space-y-1.5">
              <Label htmlFor="address">Address and Phone Number</Label>
              <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                <Input
                  id="address"
                  placeholder="Enter your full address"
                  value={address}
                  onChange={handleAddressChange}
                  className={`flex-grow ${isVerified ? 'bg-gray-100' : 'bg-blue-50'}`}
                />
                <Input
                  type="tel"
                  placeholder="Phone Number"
                  value={phoneNumber}
                  onChange={handlePhoneNumberChange}
                  className={`w-full sm:w-1/3 ${isVerified ? 'bg-gray-100' : 'bg-blue-50'}`}
                />
                <Button 
                  type="submit" 
                  disabled={isVerified || address.trim() === '' || phoneNumber.trim() === ''}
                  className={`w-full sm:w-auto ${isVerified ? 'bg-gray-300 text-gray-600' : 'bg-blue-500 text-white'}`}
                >
                  {isVerified ? "Verified" : "Verify Details"}
                </Button>
              </div>
            </div>
          </div>
        </form>
        {addressEntered && (
          <div className="mt-4 p-4 rounded-md border">
            {isServiceable === true && (
              <div className="flex items-center text-green-600">
                <Check className="mr-2 h-5 w-5" />
                <span className="font-medium">Great news! We can deliver to you. Start shopping below.</span>
              </div>
            )}
            {isServiceable === false && (
              <div className="flex items-center text-red-600">
                <X className="mr-2 h-5 w-5" />
                <span className="font-medium">We&apos;re sorry, we can&apos;t deliver to your area at this time.</span>
              </div>
            )}
            {isServiceable === null && (
              <div className="flex items-center text-yellow-600">
                <span className="font-medium">Checking serviceability...</span>
              </div>
            )}
          </div>
        )}
        <div className="mt-4 p-4 bg-blue-50 rounded-md">
          <h3 className="text-lg font-semibold mb-2">Service Information</h3>
          <ul className="list-disc list-inside text-sm">
            <li>Estimated delivery time: {serviceInfo.deliveryTime}</li>
            <li>Service area: {serviceInfo.serviceArea}</li>
            <li>Minimum order value: ${serviceInfo.minOrderValue.toFixed(2)}</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  )
}

export default AddressForm

================
File: components/Cart.tsx
================
import React, { useState, useMemo } from 'react'
import { X, AlertCircle, ShoppingCart, Trash2 } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { loadStripe } from '@stripe/stripe-js'
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js'
import { CartItem } from '@/types/cart'
import { useCart } from '../context/CartContext'
import { storeConfig } from '@/config/config'

interface CartProps {
  isCartOpen: boolean;
  setIsCartOpen: (isOpen: boolean) => void;
  cart: CartItem[];
  updateQuantity: (id: string, increment: boolean) => void;
  removeFromCart: (id: string) => void;
  deliveryCharge: number;
  isAddressValid: boolean;
  getTotalPrice: () => number;
}

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!)

function CheckoutForm({ total, onSuccess, isMinOrderMet }: { total: number; onSuccess: () => void; isMinOrderMet: boolean }) {
  const stripe = useStripe()
  const elements = useElements()
  const [error, setError] = useState<string | null>(null)
  const [processing, setProcessing] = useState(false)

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    setProcessing(true)

    if (!stripe || !elements) {
      return
    }

    // Convert total to cents and round to avoid floating point issues
    const amountInCents = Math.round(total * 100)

    const { error: backendError, clientSecret } = await fetch('/api/create-payment-intent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ amount: amountInCents }), // amount in cents
    }).then(res => res.json())

    if (backendError) {
      setError(backendError.message)
      setProcessing(false)
      return
    }

    const cardElement = elements.getElement(CardElement);
    if (!cardElement) {
      setError('Card element not found');
      setProcessing(false);
      return;
    }

    const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
      payment_method: {
        card: cardElement,
      },
    })

    if (error) {
      setError(error.message || 'An error occurred')
    } else if (paymentIntent.status === 'succeeded') {
      onSuccess()
    }

    setProcessing(false)
  }

  return (
    <form onSubmit={handleSubmit}>
      <CardElement />
      {error && <div className="text-red-500 mt-2">{error}</div>}
      <Button 
        className="w-full mt-4" 
        type="submit"
        disabled={!stripe || processing || !isMinOrderMet}
      >
        {processing ? 'Processing...' : `Pay $${total.toFixed(2)}`}
      </Button>
    </form>
  )
}

// New component for the minimum order message
const MinOrderMessage = ({ minOrderValue, currentSubtotal }: { minOrderValue: number, currentSubtotal: number }) => (
  <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4 rounded">
    <div className="flex items-center">
      <AlertCircle className="flex-shrink-0 mr-2" size={20} />
      <div>
        <p className="font-bold">Minimum order not met</p>
        <p>
          Add ${(minOrderValue - currentSubtotal).toFixed(2)} more to your order to meet the ${minOrderValue.toFixed(2)} minimum.
        </p>
      </div>
    </div>
  </div>
)

export default function Cart({
  isCartOpen,
  setIsCartOpen,
  deliveryCharge,
}: CartProps) {
  const { cart, removeFromCart, updateQuantity, clearCart } = useCart();
  
  // Calculate subtotal and total number of items
  const { subtotal, totalItems } = useMemo(() => {
    return cart.reduce((acc, item) => ({
      subtotal: acc.subtotal + item.price * item.quantity,
      totalItems: acc.totalItems + item.quantity
    }), { subtotal: 0, totalItems: 0 });
  }, [cart]);

  const total = subtotal + deliveryCharge;
  const isMinOrderMet = subtotal >= storeConfig.serviceInfo.minOrderValue;

  const [paymentSuccess, setPaymentSuccess] = useState(false)

  const handlePaymentSuccess = () => {
    setPaymentSuccess(true)
    clearCart() // Clear the cart upon successful payment
    // Here you would typically update order status, send confirmation, etc.
  }

  const handleUpdateQuantity = (id: string, increment: boolean) => {
    const item = cart.find(item => item.id === id);
    if (item) {
      const currentQuantity = item.quantity;
      const newQuantity = increment ? currentQuantity + 1 : Math.max(1, currentQuantity - 1);
      
      updateQuantity(id, newQuantity);
    } else {
      console.log(`Item with id ${id} not found in cart`);
    }
  };

  return (
    <>
      {/* Dark overlay */}
      {isCartOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={() => setIsCartOpen(false)}
        />
      )}
      
      {/* Cart component */}
      <div className={`fixed inset-y-0 right-0 w-full sm:w-[28rem] lg:w-[32rem] bg-white shadow-lg transform ${isCartOpen ? 'translate-x-0' : 'translate-x-full'} transition-transform duration-300 ease-in-out overflow-y-auto z-50`}>
        <div className="p-6 h-full flex flex-col">
          {/* Cart header */}
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold flex items-center">
              <ShoppingCart className="mr-2" size={24} />
              Your Cart ({totalItems} items)
            </h2>
            <button onClick={() => setIsCartOpen(false)} className="text-gray-500 hover:text-gray-700">
              <X size={24} />
            </button>
          </div>

          {/* Divider */}
          <div className="border-b border-gray-200 mb-6"></div>

          {paymentSuccess ? (
            <div className="flex-grow flex items-center justify-center">
              <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded w-full">
                <p className="font-bold">Payment successful!</p>
                <p>Thank you for your order.</p>
                <Button 
                  className="mt-4 w-full"
                  onClick={() => {
                    setPaymentSuccess(false)
                    setIsCartOpen(false)
                  }}
                >
                  Close
                </Button>
              </div>
            </div>
          ) : cart.length === 0 ? (
            <div className="flex-grow flex items-center justify-center">
              <p className="text-center text-gray-500">Your cart is empty</p>
            </div>
          ) : (
            <>
              <div className="flex-grow overflow-y-auto mb-6">
                {cart.map((item) => (
                  <div key={item.id} className="flex justify-between items-center mb-4 pb-4 border-b">
                    <div>
                      <h3 className="font-semibold">{item.name}</h3>
                      <p className="text-gray-600">${item.price.toFixed(2)} each</p>
                    </div>
                    <div className="flex items-center">
                      <button 
                        onClick={() => handleUpdateQuantity(item.id, false)} 
                        className="px-2 py-1 bg-gray-200 rounded-l"
                      >
                        -
                      </button>
                      <span className="px-4 py-1 bg-gray-100">{item.quantity}</span>
                      <button 
                        onClick={() => handleUpdateQuantity(item.id, true)} 
                        className="px-2 py-1 bg-gray-200 rounded-r"
                      >
                        +
                      </button>
                      <button 
                        onClick={() => removeFromCart(item.id)} 
                        className="ml-4 text-gray-500 hover:text-red-500 transition-colors duration-200"
                      >
                        <Trash2 size={20} />
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              {/* Order summary and payment section */}
              <div className="mt-auto">
                {/* Order summary */}
                <div className="bg-gray-100 p-4 rounded-lg mb-4">
                  <h3 className="font-bold text-lg mb-2">Order Summary</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Subtotal:</span>
                      <span className="font-semibold">${subtotal.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Delivery Charge:</span>
                      <span className="font-semibold">${deliveryCharge.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between text-lg font-bold border-t pt-2">
                      <span>Total:</span>
                      <span>${total.toFixed(2)}</span>
                    </div>
                  </div>
                </div>

                {/* Minimum order message or Payment section */}
                {!isMinOrderMet ? (
                  <MinOrderMessage 
                    minOrderValue={storeConfig.serviceInfo.minOrderValue} 
                    currentSubtotal={subtotal}
                  />
                ) : (
                  <div className="bg-white p-4 rounded-lg border">
                    <h3 className="font-bold text-lg mb-4">Payment</h3>
                    <Elements stripe={stripePromise}>
                      <CheckoutForm 
                        total={total} 
                        onSuccess={handlePaymentSuccess} 
                        isMinOrderMet={isMinOrderMet}
                      />
                    </Elements>
                  </div>
                )}
              </div>
            </>
          )}
        </div>
      </div>
    </>
  )
}

================
File: components/CartButton.tsx
================
import React from 'react'
import { Button } from "@/components/ui/button"
import { ShoppingCart } from 'lucide-react'

interface CartButtonProps {
  isCartOpen: boolean;
  setIsCartOpen: React.Dispatch<React.SetStateAction<boolean>>;
  itemCount: number;  // Change this from totalItems to itemCount
}

const CartButton: React.FC<CartButtonProps> = React.memo(({ isCartOpen, setIsCartOpen, itemCount }) => {
  
  return (
    <Button onClick={() => setIsCartOpen(!isCartOpen)} variant="outline" className="relative">
      <ShoppingCart className="h-4 w-4 mr-2" />
      Cart
      {itemCount > 0 && (
        <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
          {itemCount}
        </span>
      )}
    </Button>
  )
});

CartButton.displayName = 'CartButton';

export default CartButton;

================
File: components/ClosedStoreNotice.tsx
================
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Clock } from 'lucide-react'

type ClosedStoreNoticeProps = {
  timeUntilOpen: string;
  nextOpeningTime: string;
}

const ClosedStoreNotice: React.FC<ClosedStoreNoticeProps> = ({ timeUntilOpen, nextOpeningTime }) => {
  const currentTime = new Date();
  const [nextOpeningHour, nextOpeningPeriod] = nextOpeningTime.split(' ');
  const [hour, minute] = nextOpeningHour.split(':').map(Number);
  
  const nextOpeningDate = new Date(currentTime);
  nextOpeningDate.setHours(nextOpeningPeriod === 'PM' && hour !== 12 ? hour + 12 : hour, minute, 0, 0);
  
  if (nextOpeningDate < currentTime) {
    nextOpeningDate.setDate(nextOpeningDate.getDate() + 1);
  }

  const opensToday = nextOpeningDate.getDate() === currentTime.getDate();

  return (
    <Card className="border-2 border-yellow-500 shadow-lg p-4 sm:p-6">
      <CardHeader>
        <CardTitle className="text-xl sm:text-2xl font-bold text-yellow-600">Store is Currently Closed</CardTitle>
        <CardDescription className="text-sm sm:text-base text-gray-700">
          We&apos;re sorry, but we&apos;re not accepting orders at this time.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex items-center text-yellow-600 mb-4">
          <Clock className="mr-2 h-5 w-5" />
          <span className="font-medium">Opens in: {timeUntilOpen}</span>
        </div>
        <p className="text-sm text-gray-600">
          We will open at <strong>{nextOpeningTime}</strong> {opensToday ? 'today' : 'tomorrow'}.
        </p>
        <p className="mt-4 text-sm text-gray-600">
          Please check back during our operating hours to place an order. We appreciate your patience!
        </p>
      </CardContent>
    </Card>
  )
}

export default ClosedStoreNotice

================
File: components/ProductGrid.tsx
================
'use client';

import React, { useMemo } from 'react'
import { useAddress } from '../context/AddressContext'
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Plus, Minus } from 'lucide-react'
import Image from 'next/image'
import { useCart } from '../context/CartContext'

type Product = {
  id: number;
  name: string;
  category: string;
  price: number;
  image: string | null;
}

interface ProductGridProps {
  products: Product[];
  isStoreOpen: boolean;
}

export default React.memo(function ProductGrid({
  products,
  isStoreOpen,
}: ProductGridProps) {
  const { cart, addToCart, removeFromCart, updateQuantity } = useCart();
  const { isServiceable, isVerified } = useAddress();

  const getItemQuantity = (id: number) => {
    const item = cart.find(item => item.id === id.toString());
    return item ? item.quantity : 0;
  };

  const handleUpdateQuantity = (product: Product, increment: boolean) => {
    const currentQuantity = getItemQuantity(product.id);
    const newQuantity = increment ? currentQuantity + 1 : Math.max(0, currentQuantity - 1);
    
    if (newQuantity === 0) {
      removeFromCart(product.id.toString());
    } else {
      updateQuantity(product.id.toString(), newQuantity);
    }
  };

  // Filter out products with empty categories
  const validProducts = useMemo(() => 
    products.filter(product => product.category && product.category.trim() !== ''),
    [products]
  );

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      {validProducts.map((product) => (
        <Card key={product.id}>
          <CardHeader>
            <div className="flex justify-between items-start">
              <CardTitle>{product.name}</CardTitle>
              <span className="px-2 py-1 bg-gray-200 text-gray-800 text-xs font-semibold rounded-full">
                {product.category}
              </span>
            </div>
          </CardHeader>
          <CardContent className="p-4">
            <div className="relative w-full aspect-square mb-2">
              <Image 
                src={product.image ? `/product-images/${product.image}` : "/images/placeholder.png"}
                alt={product.name} 
                fill
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                className="rounded-md" 
                style={{ objectFit: 'cover' }}
              />
            </div>
            <p>Price: ${product.price.toFixed(2)}</p>
          </CardContent>
          <CardFooter>
            {isStoreOpen && isVerified && isServiceable ? (
              <div className="w-full flex justify-end">
                {getItemQuantity(product.id) > 0 ? (
                  <div className="flex items-center">
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => handleUpdateQuantity(product, false)}
                    >
                      <Minus className="h-4 w-4" />
                    </Button>
                    <span className="mx-2">{getItemQuantity(product.id)}</span>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => handleUpdateQuantity(product, true)}
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                ) : (
                  <Button onClick={() => {
                    addToCart({ id: product.id.toString(), name: product.name, price: product.price, quantity: 1 });
                  }}>
                    Add to Cart
                  </Button>
                )}
              </div>
            ) : null}
          </CardFooter>
        </Card>
      ))}
    </div>
  )
})

================
File: components/home-page.tsx
================
'use client'

import { useState, useEffect, useCallback, useMemo } from 'react'
import { Search, X } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import AddressForm from './AddressForm'
import ProductGrid from './ProductGrid'
import Cart from './Cart'
import CartButton from './CartButton'
import Image from 'next/image'
import { storeConfig, products, siteInfo } from '../config/config'
import Link from 'next/link'
import { useAddress } from '../context/AddressContext';
import { useCart } from '../context/CartContext'; // Make sure this import is present
import ClosedStoreNotice from './ClosedStoreNotice'

type CartItem = {
  id: string;  // Change this from number to string
  name: string;
  price: number;
  quantity: number;
}

const formatHour = (hour: number) => {
  const period = hour >= 12 ? 'PM' : 'AM';
  const displayHour = hour % 12 || 12;
  return `${displayHour}:00 ${period}`;
};

export function HomePage() {
  const [isStoreOpen, setIsStoreOpen] = useState(false)
  const [timeUntilOpen, setTimeUntilOpen] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [cart, setCart] = useState<CartItem[]>([])
  const [isCartOpen, setIsCartOpen] = useState(false)
  const [addressEntered, setAddressEntered] = useState(false)
  const [addressChanged, setAddressChanged] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [phoneNumberEntered, setPhoneNumberEntered] = useState(false)
  const { isServiceable, setIsServiceable } = useAddress();
  const { cart: cartFromContext } = useCart(); // Use the cart from the CartContext
  const [nextOpeningTime, setNextOpeningTime] = useState('')

  const checkServiceability = useCallback(async () => {
    setIsServiceable(null);

    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      const isWithinServiceArea = Math.random() < 0.7;
      setIsServiceable(isWithinServiceArea);
    } catch (error) {
      setIsServiceable(false);
    }
  }, [setIsServiceable]);

  useEffect(() => {
    const timer = setInterval(() => {
      const now = new Date()
      const currentHour = now.getHours()
      const isOpen = currentHour >= storeConfig.openingHour && currentHour < storeConfig.closingHour
      setIsStoreOpen(isOpen)

      if (!isOpen) {
        const openingTime = new Date(now)
        openingTime.setHours(storeConfig.openingHour, 0, 0, 0)
        if (currentHour >= storeConfig.closingHour) {
          openingTime.setDate(openingTime.getDate() + 1)
        }
        const timeDiff = openingTime.getTime() - now.getTime()
        const hoursUntilOpen = Math.floor(timeDiff / (1000 * 60 * 60))
        const minutesUntilOpen = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60))
        const secondsUntilOpen = Math.floor((timeDiff % (1000 * 60)) / 1000)
        setTimeUntilOpen(`${hoursUntilOpen}h ${minutesUntilOpen}m ${secondsUntilOpen}s`)
        setNextOpeningTime(formatHour(storeConfig.openingHour))
      }
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  const removeFromCart = (id: string) => {
    setCart(prevCart => prevCart.filter(item => item.id !== id))
  }

  const updateQuantity = (id: string, newQuantity: number) => {
    if (newQuantity < 1) {
      removeFromCart(id)
    } else {
      setCart(prevCart =>
        prevCart.map(item =>
          item.id === id ? { ...item, quantity: newQuantity } : item
        )
      )
    }
  }

  const getItemQuantity = (id: string) => {
    const item = cart.find(item => item.id === id)
    return item ? item.quantity : 0
  }

  const getTotalItems = useMemo(() => {
    const total = cartFromContext.reduce((total, item) => total + item.quantity, 0);
    return total;
  }, [cartFromContext]); // This will recalculate whenever the cart changes


  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0)
  }

  const filteredProducts = products
    .filter(product => 
      (selectedCategory === 'all' || product.category === selectedCategory) &&
      product.name.toLowerCase().includes(searchTerm.toLowerCase())
    )

  // New: Get unique categories from filtered products
  const availableCategories = useMemo(() => {
    const categorySet = new Set(filteredProducts.map(product => product.category));
    return ['all', ...Array.from(categorySet)];
  }, [filteredProducts]);

  const isAddressValid = addressEntered && (isServiceable ?? false) && !addressChanged && phoneNumberEntered

  const clearSearch = () => {
    setSearchTerm('')
    setSelectedCategory('all')
  }


  return (
    <div className="min-h-screen bg-gray-100">
      {/* Fixed top bar */}
      <div className="fixed top-0 left-0 right-0 bg-white shadow-md z-50">
        <div className="max-w-7xl mx-auto px-4 py-2">
          <div className="flex justify-between items-center">
            <div className="flex items-center">
              <Image src="/NightOwl.png" alt="NightOwl Logo" width={30} height={30} />
              <h1 className="text-xl font-bold ml-2">NightOwl</h1>
            </div>
            <p className="text-sm text-gray-600">
              Open {formatHour(storeConfig.openingHour)} - {formatHour(storeConfig.closingHour)}
            </p>
            <CartButton 
              isCartOpen={isCartOpen} 
              setIsCartOpen={setIsCartOpen} 
              itemCount={getTotalItems}
            />
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="pt-20 p-8">
        <div className="max-w-7xl mx-auto bg-white rounded-lg shadow-lg p-8">
          {/* Welcome section */}
          <div className="mb-8 text-center">
            <h2 className="text-3xl font-bold mb-4">Welcome to NightOwl</h2>
            <div className="max-w-2xl mx-auto">
              <p className="text-gray-600 mb-6">
                {siteInfo.longDescription}
              </p>
              <Link href="/about">
                <Button variant="outline">
                  Learn More
                </Button>
              </Link>
            </div>
          </div>

          {isStoreOpen ? (
            <AddressForm
              addressEntered={addressEntered}
              setAddressEntered={setAddressEntered}
              checkServiceability={checkServiceability}
              setAddressChanged={setAddressChanged}
              setPhoneNumberEntered={setPhoneNumberEntered}
              serviceInfo={storeConfig.serviceInfo}
            />
          ) : (
            <ClosedStoreNotice
              timeUntilOpen={timeUntilOpen}
              nextOpeningTime={nextOpeningTime}
            />
          )}

          <div className="relative mt-12 mb-12">
            <h2 className="text-xl font-semibold mb-4 text-center">Products</h2>
            
            <div className="mb-6">
              <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className="w-full">
                <TabsList className="bg-gray-100 p-1 rounded-lg h-10 flex items-center">
                  {availableCategories.map(category => (
                    <TabsTrigger 
                      key={category} 
                      value={category}
                      className="px-3 py-1 text-sm font-medium transition-colors
                                 data-[state=active]:bg-white data-[state=active]:text-blue-600
                                 data-[state=active]:shadow-sm hover:bg-gray-200"
                    >
                      {category === 'all' ? 'All' : category}
                    </TabsTrigger>
                  ))}
                  <div className="relative ml-auto">
                    <Input
                      type="text"
                      placeholder="Search products..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-8 pr-8 py-1 w-48 h-8 text-sm bg-white"
                    />
                    <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
                    {searchTerm && (
                      <Button 
                        onClick={clearSearch}
                        variant="ghost" 
                        className="absolute right-1 top-1/2 transform -translate-y-1/2 p-1 h-6 w-6"
                        aria-label="Clear search"
                      >
                        <X size={12} />
                      </Button>
                    )}
                  </div>
                </TabsList>
              </Tabs>
            </div>

            <div>
              {availableCategories.map(category => (
                <div key={category} className={selectedCategory === category ? '' : 'hidden'}>
                  <ProductGrid
                    products={filteredProducts}
                    isStoreOpen={isStoreOpen}
                  />
                </div>
              ))}
            </div>

            <Cart
              isCartOpen={isCartOpen}
              setIsCartOpen={setIsCartOpen}
              cart={cart}
              isAddressValid={isAddressValid}
              updateQuantity={(id: string, increment: boolean) => 
                updateQuantity(id, getItemQuantity(id) + (increment ? 1 : -1))
              }
              removeFromCart={removeFromCart}
              getTotalPrice={getTotalPrice}
              deliveryCharge={storeConfig.deliveryCharge}
            />
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: config/config.ts
================
export const storeConfig = {
  openingHour: 18, // 7 AM
  closingHour: 22, // 10 PM
  deliveryCharge: 10, // $10 delivery charge
  serviceInfo: {
    deliveryTime: '30-45 minutes (usually quicker)',
    serviceArea: 'Akaroa Township',
    minOrderValue: 5,
  },
};

// Add this new configuration object
export const siteInfo = {
  name: 'NightOwl',
  shortDescription: 'NightOwl is a delivery only service.',
  longDescription: 'NightOwl is your convenient delivery service, offering groceries, household essentials, and more whenever you need them. With quick and reliable deliveries, weâ€™re here to make sure you have what you need, when you need it.',
};

export const categories = [
  { id: 'all', name: 'All Items' },
  { id: 'health', name: 'Health & Wellness' },
  { id: 'food', name: 'Food & Beverages' },
  { id: 'household', name: 'Household Essentials' },
  { id: 'personal', name: 'Personal Care' },
  { id: 'pet', name: 'Pet Supplies' },
  { id: 'tech', name: 'Tech Accessories' },
  { id: 'tobacco', name: 'Tobacco & Alcohol' },
  { id: 'seasonal', name: 'Seasonal Items' },
  { id: 'convenience', name: 'Convenience Items' }
];

export const products = [
  // Health & Wellness
  { id: 1, name: 'Pain Reliever', category: 'health', price: 5.99, image: null },
  { id: 2, name: 'Cold & Flu Medicine', category: 'health', price: 8.99, image: null },
  { id: 3, name: 'Allergy Medication', category: 'health', price: 12.99, image: null },
  { id: 4, name: 'First Aid Kit', category: 'health', price: 15.99, image: null },
  { id: 5, name: 'Bandages', category: 'health', price: 3.99, image: null },

  // Food & Beverages
  { id: 6, name: 'Ready-to-eat Sandwich', category: 'food', price: 4.99, image: null },
  { id: 7, name: 'Microwaveable Meal', category: 'food', price: 5.99, image: null },
  { id: 8, name: 'Energy Drink', category: 'food', price: 2.99, image: null },
  { id: 9, name: 'Bottled Water', category: 'food', price: 1.99, image: null },
  { id: 10, name: 'Chips', category: 'food', price: 3.49, image: null },
  { id: 11, name: 'Energy Bars', category: 'food', price: 2.49, image: null },
  { id: 12, name: 'Baby Formula', category: 'food', price: 17.99, image: null },

  // Household Essentials
  { id: 13, name: 'All-purpose Cleaner', category: 'household', price: 4.99, image: null },
  { id: 14, name: 'Paper Towels', category: 'household', price: 3.99, image: null },
  { id: 15, name: 'Trash Bags', category: 'household', price: 5.99, image: null },
  { id: 16, name: 'AA Batteries', category: 'household', price: 7.99, image: null },
  { id: 17, name: 'Light Bulbs', category: 'household', price: 4.99, image: null },
  { id: 18, name: 'Multi-tool', category: 'household', price: 12.99, image: null },
  { id: 99, name: 'Lighter', category: 'household', price: 5.99, image: null },

  // Personal Care
  { id: 19, name: 'Toothpaste', category: 'personal', price: 3.99, image: null },
  { id: 20, name: 'Deodorant', category: 'personal', price: 4.99, image: null },
  { id: 21, name: 'Feminine Hygiene Products', category: 'personal', price: 6.99, image: null },
  { id: 22, name: 'Diapers', category: 'personal', price: 12.99, image: null },
  { id: 23, name: 'Baby Wipes', category: 'personal', price: 3.99, image: null },
  { id: 24, name: 'Condoms', category: 'personal', price: 9.99, image: null },
  { id: 25, name: 'Lip Balm', category: 'personal', price: 2.99, image: null },

  // Pet Supplies
  { id: 26, name: 'Dog Food (Small Bag)', category: 'pet', price: 8.99, image: null },
  { id: 27, name: 'Cat Food (Small Bag)', category: 'pet', price: 7.99, image: null },
  { id: 28, name: 'Cat Litter', category: 'pet', price: 9.99, image: null },

  // Tech Accessories
  { id: 29, name: 'Phone Charger', category: 'tech', price: 14.99, image: null },
  { id: 30, name: 'Portable Power Bank', category: 'tech', price: 24.99, image: null },

  // Tobacco & Alcohol
  { id: 31, name: 'Cigarettes', category: 'tobacco', price: 8.99, image: null },
  { id: 32, name: 'Beer 6-pack', category: 'tobacco', price: 9.99, image: null },
  { id: 33, name: 'Wine Bottle', category: 'tobacco', price: 12.99, image: null },

  // Seasonal Items
  { id: 34, name: 'Sunscreen', category: 'seasonal', price: 8.99, image: null },
  { id: 35, name: 'Hand Warmers', category: 'seasonal', price: 3.99, image: null },

  // Convenience Items
  { id: 36, name: 'Gift Card', category: 'convenience', price: 25.00, image: null },
  { id: 37, name: 'Stamps', category: 'convenience', price: 11.00, image: null },
  { id: 38, name: 'Pen', category: 'convenience', price: 1.99, image: null },
  { id: 39, name: 'Notepad', category: 'convenience', price: 2.99, image: null }
];

================
File: context/AddressContext.tsx
================
"use client";

import React, { createContext, useState, useContext } from 'react';

type AddressContextType = {
  address: string;
  setAddress: (address: string) => void;
  phoneNumber: string;
  setPhoneNumber: (phoneNumber: string) => void;
  isServiceable: boolean | null;
  setIsServiceable: (isServiceable: boolean | null) => void;
  isAddressValid: boolean;
  setIsAddressValid: (isAddressValid: boolean) => void;
  isVerified: boolean;
  setIsVerified: React.Dispatch<React.SetStateAction<boolean>>;
};

export const AddressContext = createContext<AddressContextType | undefined>(undefined);

export const AddressProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [address, setAddress] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [isServiceable, setIsServiceable] = useState<boolean | null>(null);
  const [isAddressValid, setIsAddressValid] = useState(false);
  const [isVerified, setIsVerified] = useState<boolean>(false);

  return (
    <AddressContext.Provider value={{ 
      address, 
      setAddress, 
      phoneNumber, 
      setPhoneNumber, 
      isServiceable, 
      setIsServiceable,
      isAddressValid,
      setIsAddressValid,
      isVerified,
      setIsVerified
    }}>
      {children}
    </AddressContext.Provider>
  );
};

export const useAddress = () => {
  const context = useContext(AddressContext);
  if (context === undefined) {
    throw new Error('useAddress must be used within an AddressProvider');
  }
  return context;
};

================
File: context/CartContext.tsx
================
'use client';

import React, { createContext, useState, useEffect, useContext } from 'react';

type CartItem = {
  id: string;
  name: string;
  price: number;
  quantity: number;
};

export type CartContextType = {
  cart: CartItem[];
  addToCart: (item: CartItem) => void;
  removeFromCart: (id: string) => void;
  clearCart: () => void;
  updateQuantity: (id: string, newQuantity: number) => void;
};

const CartContext = createContext<CartContextType | undefined>(undefined);

export function CartProvider({ children }: { children: React.ReactNode }) {
  const [cart, setCart] = useState<CartItem[]>([]);

  useEffect(() => {
    // Load cart from localStorage on initial render
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }
  }, []);

  useEffect(() => {
    // Save cart to localStorage whenever it changes
    localStorage.setItem('cart', JSON.stringify(cart));
  }, [cart]);

  const addToCart = (item: CartItem) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(cartItem => cartItem.id === item.id);
      if (existingItem) {
        return prevCart.map(cartItem =>
          cartItem.id === item.id
            ? { ...cartItem, quantity: cartItem.quantity + 1 }
            : cartItem
        );
      }
      return [...prevCart, { ...item, quantity: 1 }];
    });
  };

  const removeFromCart = (id: string) => {
    setCart(prevCart => prevCart.filter(item => item.id !== id));
  };

  const clearCart = () => {
    setCart([]);
  };

  const updateQuantity = (id: string, newQuantity: number) => {
    setCart(currentCart =>
      currentCart.map(item =>
        item.id === id ? { ...item, quantity: newQuantity } : item
      )
    );
  };

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart, clearCart, updateQuantity }}>
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
}

================
File: hooks/useScrollPosition.tsx
================
import { useState, useEffect } from 'react'

export function useScrollPosition() {
  const [scrollPosition, setScrollPosition] = useState(0)

  useEffect(() => {
    const updatePosition = () => {
      setScrollPosition(window.pageYOffset)
    }
    window.addEventListener('scroll', updatePosition)
    updatePosition()
    return () => window.removeEventListener('scroll', updatePosition)
  }, [])

  return scrollPosition
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "nightowl",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@stripe/react-stripe-js": "^2.8.0",
    "@stripe/stripe-js": "^4.4.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.441.0",
    "next": "14.2.11",
    "react": "^18",
    "react-dom": "^18",
    "stripe": "^16.11.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.11",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    },
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: types/cart.ts
================
export interface CartItem {
  id: string; // Change this to string
  name: string;
  price: number;
  quantity: number;
}
